# A collector defining standard metrics for Microsoft SQL Server.
#
# It is required that the SQL Server user has the following permissions:
#
#   GRANT VIEW ANY DEFINITION TO
#   GRANT VIEW SERVER STATE TO
#
collector_name: mssql_standard

# Similar to global.min_interval, but applies to the queries defined by this collector only.
#min_interval: 0s

metrics:
  - metric_name: mssql_version
    help: 'version, edition, instance, chartset and sortorder server properties as labels: value 1'
    type: gauge
    values: [value]
    key_labels:
      - version
      - edition
      - config_instance
      - chartset
      - sortorder
      - maxconnection
    query: |
      select SERVERPROPERTY('ProductVersion') as version,
      SERVERPROPERTY('Edition') as edition,
      SERVERPROPERTY('InstanceName') as config_instance,
      SERVERPROPERTY('SqlCharSetName') as chartset,
      SERVERPROPERTY('SqlSortOrderName') as sortorder,
      @@MAX_CONNECTIONS as maxconnection,
      1 as value

  - metric_name: mssql_local_time_seconds
    type: gauge
    help: 'Local time in seconds since epoch (Unix time).'
    values: [unix_time]
    query: |
      SELECT DATEDIFF(second, '19700101', GETUTCDATE()) AS unix_time

  - metric_name: mssql_start_timestamp
    help: "server start timestamp (unix epoch) in second"
    type: gauge
    values: [unix_time]
    query: |
      SELECT DATEDIFF(second, '19700101', login_time) as unix_time 
      FROM sys.sysprocesses 
      where spid=1

  - metric_name: mssql_connections
    type: gauge
    help: 'Number of active connections.'
    key_labels:
      - db
      - status
    values: [count]
    query: |
      SELECT 
        DB_NAME(sp.dbid) AS db,
        sp.status as status,
        COUNT(sp.spid) AS count
      FROM sys.sysprocesses sp
      GROUP BY DB_NAME(sp.dbid), status

  #
  # Collected from sys.dm_os_performance_counters
  #
  - metric_name: mssql_deadlocks
    type: counter
    help: 'Number of lock requests that resulted in a deadlock.'
    values: [cntr_value]
    query: |
      SELECT cntr_value
      FROM sys.dm_os_performance_counters WITH (NOLOCK)
      WHERE counter_name = 'Number of Deadlocks/sec' AND instance_name = '_Total'

  - metric_name: mssql_user_errors
    type: counter
    help: 'Number of user errors.'
    values: [cntr_value]
    query: |
      SELECT cntr_value
      FROM sys.dm_os_performance_counters WITH (NOLOCK)
      WHERE counter_name = 'Errors/sec' AND instance_name = 'User Errors'

  - metric_name: mssql_kill_connection_errors
    type: counter
    help: 'Number of severe errors that caused SQL Server to kill the connection.'
    values: [cntr_value]
    query: |
      SELECT cntr_value
      FROM sys.dm_os_performance_counters WITH (NOLOCK)
      WHERE counter_name = 'Errors/sec' AND instance_name = 'Kill Connection Errors'

  - metric_name: mssql_page_life_expectancy_seconds
    type: gauge
    help: 'The minimum number of seconds a page will stay in the buffer pool on this node without references.'
    values: [cntr_value]
    query: |
      SELECT top(1) cntr_value
      FROM sys.dm_os_performance_counters WITH (NOLOCK)
      WHERE counter_name = 'Page life expectancy'

  - metric_name: mssql_batch_requests
    type: counter
    help: 'Number of command batches received.'
    values: [cntr_value]
    query: |
      SELECT cntr_value
      FROM sys.dm_os_performance_counters WITH (NOLOCK)
      WHERE counter_name = 'Batch Requests/sec'

  - metric_name: mssql_log_growths
    type: counter
    help: 'Number of times the transaction log has been expanded, per database.'
    key_labels:
      - db
    values: [cntr_value]
    query: |
      SELECT rtrim(instance_name) AS db, cntr_value
      FROM sys.dm_os_performance_counters WITH (NOLOCK)
      WHERE counter_name = 'Log Growths' AND instance_name <> '_Total'

  - metric_name: mssql_buffer_cache_hit_ratio
    type: gauge
    help: 'Ratio of requests that hit the buffer cache (type hit), total request (type tot_req)'
    values: [hit, tot_req]
    value_label: 'type'
    query: |
      SELECT a.cntr_value as hit,
        b.cntr_value as tot_req
      FROM sys.dm_os_performance_counters a WITH (NOLOCK), sys.dm_os_performance_counters b WITH (NOLOCK)
      WHERE a.counter_name = 'Buffer cache hit ratio base'
      and b.counter_name = 'Buffer cache hit ratio'

  - metric_name: mssql_checkpoint_pages_sec
    type: gauge
    help: 'Checkpoint Pages Per Second'
    values: [cntr_value]
    query: |
      SELECT cntr_value
      FROM sys.dm_os_performance_counters
      WHERE [counter_name] = 'Checkpoint pages/sec'

  #
  # Collected from sys.dm_io_virtual_file_stats
  #
  - metric_name: mssql_io_stall_seconds
    type: counter
    help: 'Stall time in seconds per database and I/O operation.'
    key_labels:
      - db
    value_label: operation
    values:
      - read
      - write
    query_ref: mssql_io_stall
  - metric_name: mssql_io_stall_total_seconds
    type: counter
    help: 'Total stall time in seconds per database.'
    key_labels:
      - db
    values:
      - io_stall
    query_ref: mssql_io_stall

  #
  # Collected from sys.dm_os_process_memory
  #
  - metric_name: mssql_resident_memory_bytes
    type: gauge
    help: 'SQL Server resident memory size (AKA working set).'
    values: [resident_memory_bytes]
    query_ref: mssql_process_memory

  - metric_name: mssql_virtual_memory_bytes
    type: gauge
    help: 'SQL Server committed virtual memory size.'
    values: [virtual_memory_bytes]
    query_ref: mssql_process_memory

  - metric_name: mssql_memory_utilization_percentage
    type: gauge
    help: 'The percentage of committed memory that is in the working set.'
    values: [memory_utilization_percentage]
    query_ref: mssql_process_memory

  - metric_name: mssql_page_fault_count
    type: counter
    help: 'The number of page faults that were incurred by the SQL Server process.'
    values: [page_fault_count]
    query_ref: mssql_process_memory

  #
  # Collected from sys.dm_os_sys_memory
  #
  - metric_name: mssql_os_memory_bytes
    type: gauge
    help: 'OS physical memory, used and available in bytes.'
    value_label: 'state'
    values: [used, available, total]
    query: |
      SELECT
        (total_physical_memory_kb - available_physical_memory_kb) * 1024 AS used,
        available_physical_memory_kb * 1024 AS available,
        total_physical_memory_kb * 1024 AS total
      FROM sys.dm_os_sys_memory

  - metric_name: mssql_os_page_file_bytes
    type: gauge
    help: 'OS page file, used and available in bytes.'
    value_label: 'state'
    values: [used, available, total]
    query: |
      SELECT
        (total_page_file_kb - available_page_file_kb) * 1024 AS used,
        available_page_file_kb * 1024 AS available,
        total_page_file_kb * 1024 AS total
      FROM sys.dm_os_sys_memory
  
  - metric_name: mssql_database_state
    type: gauge
    help: "Database state: 0=ONLINE 1=RESTORING 2=RECOVERING 3=RECOVERY_PENDING 4=SUSPECT 5=EMERGENCY 6=OFFLINE 7=COPYING 10=OFFLINE_SECONDARY"
    query: |
      SELECT name as db, state FROM master.sys.databases
    values: [state]
    key_labels:
      - db

  - metric_name: mssql_database_filesize_bytes
    type: gauge
    help: Physical sizes of files used by database in bytes, their names and types (0=rows, 1=log, 2=filestream,3=n/a 4=fulltext(before v2008 of MSSQL))
    query: |
      SELECT DB_NAME(database_id) AS db,
        name AS logical_name,
        type,
        physical_name,
        (size * CAST(8192 AS BIGINT)) size_bytes 
      FROM sys.master_files
    values: [size_bytes]
    key_labels: 
      - db
      - logical_name
      - type
      - physical_name

  - metric_name: mssql_database_transactions_per_second
    type: gauge
    help: "Number of transactions started for the database per second. Transactions/sec does not count XTP-only transactions (transactions started by a natively compiled stored procedure.)"
    query: |
      SELECT rtrim(instance_name) as db, cntr_value
      FROM sys.dm_os_performance_counters
      WHERE counter_name = 'Transactions/sec' AND instance_name <> '_Total'
    values: [cntr_value]
    key_labels:
      - db

  - metric_name: mssql_database_cpu_usage_milliseconds
    type: counter
    help: "total number of miliseconds used by database"
    query: |
      SELECT
        ISNULL(DB_Name(dm_execplanattr.DatabaseID), 'Resource[INTERNAL]') AS [db],
        SUM (dm_execquerystats.total_worker_time) AS CPUTimeInMiliSeconds
      FROM sys.dm_exec_query_stats dm_execquerystats
      CROSS APPLY 
      (SELECT 
        CONVERT (INT, value) AS [DatabaseID]
      FROM sys.dm_exec_plan_attributes(dm_execquerystats.plan_handle)
      WHERE attribute = N'dbid'
      ) dm_execplanattr
      GROUP BY dm_execplanattr.DatabaseID
    values: [CPUTimeInMiliSeconds]
    key_labels:
      - db

  #** jobs parts
  - metric_name: mssql_jobs_lastrun_timestamp
    type: gauge
    help: 'the status of the job: 0=disable 1=enable.'
    values: [lastrun_timestamp]
    query_ref: mssql_jobs
    key_labels:
      - jobname

  - metric_name: mssql_jobs_enable
    type: gauge
    help: 'the activation state of the job: 0=disable 1=enable.'
    values: [jobstatus]
    query_ref: mssql_jobs
    key_labels:
      - jobname

  - metric_name: mssql_jobs_status
    type: gauge
    help: 'the result status of the job: 0=failed 1=succeeded 2=retry 3=cancelled.'
    values: [jobrunstatus]
    query_ref: mssql_jobs
    key_labels:
      - jobname

queries:
  # Populates `mssql_io_stall` and `mssql_io_stall_total`
  - query_name: mssql_io_stall
    query: |
      SELECT
        replace(DB_Name(a.database_id), ' ', '') AS [db],
        sum(io_stall_read_ms) / 1000.0 AS [read],
        sum(io_stall_write_ms) / 1000.0 AS [write],
        sum(io_stall) / 1000.0 AS io_stall
      FROM
        sys.dm_io_virtual_file_stats(null, null) a
      INNER JOIN sys.master_files b ON a.database_id = b.database_id AND a.file_id = b.file_id
      GROUP BY a.database_id

  # Populates `mssql_resident_memory_bytes`, `mssql_virtual_memory_bytes`, `mssql_memory_utilization_percentage` and
  # `mssql_page_fault_count`.
  - query_name: mssql_process_memory
    query: |
      SELECT
        physical_memory_in_use_kb * 1024 AS resident_memory_bytes,
        virtual_address_space_committed_kb * 1024 AS virtual_memory_bytes,
        memory_utilization_percentage,
        page_fault_count
      FROM sys.dm_os_process_memory

  - query_name: mssql_jobs
    query: |
      SELECT
        j.name as jobname,
        datediff(second, '19700101', iif(js.last_run_date > 0, 
              datetimefromparts(js.last_run_date/10000, js.last_run_date/100%100, js.last_run_date%100, 
              js.last_run_time/10000, js.last_run_time/100%100, js.last_run_time%100, 0), 
              '19700101')) as lastrun_timestamp,
        j.enabled as jobstatus,
        js.last_run_outcome as jobrunstatus
      FROM msdb.dbo.sysjobs j
      JOIN msdb.dbo.sysjobservers js on js.job_id = j.job_id

    # where j.enabled = 1
