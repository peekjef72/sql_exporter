# collector to obtain metrics on Skyp hosted in mssql server

collector_name: skype
namespace: skype

metrics:
#***********************
#*** AppSharing QOE

  - metric_name: spoiled_tile_percent_total_average
    help: Average of total spoiled tile percent average during the interval
    type: gauge
    values:
      - spoiled_tile_percent_total_average
    query_ref: appsharing_streams

  - metric_name: rdptile_processing_latency_average
    help: Average of total rdp tile processing latency in second during the interval
    type: gauge
    values:
      - rdptile_processing_latency_average
    query_ref: appsharing_streams

  - metric_name: relative_one_way_average
    help: Average of relative one way during the interval
    type: gauge
    values:
      - relative_one_way_average
    query_ref: appsharing_streams

  - metric_name: appsharing_streams_total
    help: Total application sharing stream by second
    type: gauge
    values:
      - appsharing_streams_by_second
    query_ref: appsharing_streams

  #*******
  #*** Audio QOE

  - metric_name: audio_qoe_jitter_min
    help: minimum value of JitterInterArrivalAverage during the interval
    type: gauge
    values:
      - JitterMin
    query_ref: shared_streams

  - metric_name: audio_qoe_jitter_max
    help: maximum value of JitterInterArrivalAverage during the interval
    type: gauge
    values:
      - JitterMax
    query_ref: shared_streams

  - metric_name: audio_qoe_jitter_avg
    help: average value of JitterInterArrivalAverage during the interval
    type: gauge
    values:
      - JitterAvg
    query_ref: shared_streams

  - metric_name: audio_qoe_packet_loss_min
    help: minimum value of PacketLossRate during the interval
    type: gauge
    values:
      - PacketLossMin
    query_ref: shared_streams

  - metric_name: audio_qoe_packet_loss_max
    help: maximum value of PacketLossRate during the interval
    type: gauge
    values:
      - PacketLossMax
    query_ref: shared_streams

  - metric_name: audio_qoe_packet_loss_avg
    help: average value of PacketLossRate during the interval
    type: gauge
    values:
      - PacketLossAvg
    query_ref: shared_streams

  - metric_name: audio_qoe_round_trip_min
    help: minimum value of RoundTrip during the interval
    type: gauge
    values:
      - RoundTripMin
    query_ref: shared_streams

  - metric_name: audio_qoe_round_trip_max
    help: maximum value of RoundTrip during the interval
    type: gauge
    values:
      - RoundTripMax
    query_ref: shared_streams

  - metric_name: audio_qoe_round_trip_avg
    help: average value of RoundTrip during the interval
    type: gauge
    values:
      - RoundTripAvg
    query_ref: shared_streams

  - metric_name: audio_qoe_degradation_min
    help: minimum value of DegradationAvg during the interval
    type: gauge
    values:
      - DegradationMin
    query_ref: shared_streams

  - metric_name: audio_qoe_degradation_max
    help: maximum value of DegradationAvg during the interval
    type: gauge
    values:
      - DegradationMax
    query_ref: shared_streams

  - metric_name: audio_qoe_degradation_avg
    help: average value of DegradationAvg during the interval
    type: gauge
    values:
      - DegradationAvg
    query_ref: shared_streams

  - metric_name: audio_qoe_audio_streams_count
    help: total number of audio streams during the interval
    type: gauge
    values:
      - audio_streams
    query_ref: shared_streams

  #***********************
  #*** Video QOE

  - metric_name: video_qoe_video_post_fecplr_avg
    help: average value of VideoPostFECPLR during the interval
    type: gauge
    values:
      - VideoPostFECPLR
    query_ref: video_streams

  - metric_name: video_qoe_video_frame_loss_percent
    help: average value of VideoLocalFrameLossPercentageAvg during the interval
    type: gauge
    values:
      - VideoLocalFrameLossPercentageAvg
    query_ref: video_streams

  - metric_name: video_qoe_recv_frame_rate_avg
    help: average value of RecvFrameRateAverage during the interval
    type: gauge
    values:
      - RecvFrameRateAverage
    query_ref: video_streams

  - metric_name: video_qoe_video_packet_loss_rate_avg
    help: average value of VideoPacketLossRate during the interval
    type: gauge
    values:
      - VideoPacketLossRate
    query_ref: video_streams

  - metric_name: video_qoe_video_inbound_frame_rate_avg
    help: average value of InboundVideoFrameRateAvg during the interval
    type: gauge
    values:
      - InboundVideoFrameRateAvg
    query_ref: video_streams

  - metric_name: video_qoe_video_outbound_frame_rate_avg
    help: average value of OutboundVideoFrameRateAvg during the interval
    type: gauge
    values:
      - OutboundVideoFrameRateAvg
    query_ref: video_streams

  - metric_name: video_qoe_video_streams_by_second
    help: total number of video streams by seconds
    type: gauge
    values:
      - video_streams_by_second
    query_ref: video_streams

  #***********************
  #*** poor calls
  - metric_name: poor_calls_total
    help: Count of poor calls during the interval
    type: gauge
    values:
      - total_poor_call
    query: |
      SELECT count(*) as total_poor_call
      FROM [QoEMetrics].[dbo].[User]
      WHERE LastPoorCallTime > (DATEADD(SECOND, -60,SYSUTCDATETIME()))
      AND LastPoorCallTime < SYSUTCDATETIME()

  #***********************
  #*** Session Type
  - metric_name: session_type_count
    type: gauge
    help: number of session byt media type during the interval
    key_labels:
      - media_type
    values: [value]
    query: |
      SELECT count(*) as value,
      case MediaTypes
        when 1 then 'instant_messaging'
        when 2 then 'file_transfer'
        when 4 then 'remote_assistance'
        when 8 then 'app_sharing'
        when 16 then 'audio'
        when 32 then 'video'
        when 64 then 'app_invite'
      else 'undef' end as media_type
      FROM [LcsCDR].[dbo].[SessionDetails]
      WHERE SessionIdTime > (DATEADD(SECOND, -60, SYSUTCDATETIME()))
      AND SessionIdTime < SYSUTCDATETIME()
      group by MediaTypes

  #***********************
  #*** Peer to Peer Activity
 
  - metric_name: p2p_total_sessions_count
    help: total number of peer to peer sessions during the interval
    type: gauge
    values:
      - Sessions
    query_ref: peer2peer_activity

  - metric_name: p2p_voip_calls_count
    help: total number of peer to peer voip calls during the interval
    type: gauge
    values:
      - VoipCalls
    query_ref: peer2peer_activity

  - metric_name: p2p_video_calls_count
    help: total number of peer to peer video calls during the interval
    type: gauge
    values:
      - VideoCalls
    query_ref: peer2peer_activity

  - metric_name: p2p_instant_messaging_sessions_count
    help: total number of peer to peer IM sessions during the interval
    type: gauge
    values:
      - IMSessions
    query_ref: peer2peer_activity

  - metric_name: p2p_instant_messaging_messages_count
    help: total number of peer to peer IM messages during the interval
    type: gauge
    values:
      - IMMessages
    query_ref: peer2peer_activity

  - metric_name: p2p_instant_file_transferts_count
    help: total number of peer to peer file transferts during the interval
    type: gauge
    values:
      - FileTransferActs
    query_ref: peer2peer_activity

  - metric_name: p2p_instant_application_share_count
    help: total number of peer to peer application share during the interval
    type: gauge
    values:
      - AppShareActs
    query_ref: peer2peer_activity

  # - metric_name: p2p_element_count
  #   help: Number of peer to peer sessions, voip calls, video calls, IM sessions, IM messages, file transferts, application share during the interval
  #   type: gauge
  #   value_label: mediatype
  #   values: 
  #     - p2p-Sessions
  #     - p2p-VoIpCalls
  #     - p2p-VideoCalls
  #     - p2p-IMSessions
  #     - p2p-IMMessages
  #     - p2p-FileTransfer
  #     - p2p-AppShare

  #***********************
  #*** Conference Activity

  # $req = 'exec [dbo].[MONConferenceActivityLastHour]';

  # %mapping_types = (
  #         'conf:audio-video'      => 'conf-AudioVideo',
  #         'conf:data-conf'        => 'conf-DataConf',
  #         'conf:chat'             => 'conf-Chat',
  #         'conf:phone-conf'       => 'conf-PhoneConf',
  #         'conf:applicationsharing'       => 'conf-AppShare',
  # );

  - metric_name: conf_activity_last_hour_count
    help: total number of conferences for last hour
    type: gauge
    key_labels:
      - mcu_type
    values:
      - Num
    query_ref: conf_activity

  - metric_name: conf_activity_last_hour_duration
    help: total number of seconds for all conferences in last hour
    type: gauge
    key_labels:
      - mcu_type
    values:
      - Duration
    query_ref: conf_activity

#***********************
queries:
  # Populates `io_stall` and `io_stall_total`
  - query_name: appsharing_streams
    query: |
      Declare @interval int = 60
      SELECT 
        Isnull(AVG(SpoiledTilePercentTotal),0) AS spoiled_tile_percent_total_average,
        Isnull(AVG(RDPTileProcessingLatencyAverage),0) AS rdptile_processing_latency_average,
        Isnull(AVG(RelativeOneWayAverage),0) AS relative_one_way_average,
        (COUNT(*) / 60) AS appsharing_streams_by_second
      FROM [QoEMetrics].[dbo].AppSharingStream
      WHERE ConferenceDateTime >= (DATEADD(SECOND, - (@interval * 2),SYSUTCDATETIME()))
        AND ConferenceDateTime < (DATEADD(SECOND, -@interval,SYSUTCDATETIME()))

  - query_name: shared_streams
    query: |
      Declare @interval int = 60
      SELECT 
        Isnull(MIN(CAST(JitterInterArrival AS BIGINT)),0) AS JitterMin,
        Isnull(MAX(CAST(JitterInterArrival AS BIGINT)),0) AS JitterMax,
        Isnull(AVG(CAST(JitterInterArrival AS BIGINT)),0) AS JitterAvg,
        Isnull(MIN(PacketLossRate),0) AS PacketLossMin,
        Isnull(MAX(PacketLossRate),0) AS PacketLossMax,
        Isnull(AVG(PacketLossRate),0) AS PacketLossAvg,
        Isnull(MIN(RoundTrip),0) AS RoundTripMin,
        Isnull(MAX(RoundTrip),0) AS RoundTripMax,
        Isnull(AVG(RoundTrip),0) AS RoundTripAvg,
        Isnull(MIN(DegradationAvg),0) AS DegradationMin,
        Isnull(MAX(DegradationAvg),0) AS DegradationMax,
        Isnull(AVG(DegradationAvg),0) AS DegradationAvg,
        COUNT(*) AS audio_streams
      FROM [QoEMetrics].[dbo].AudioStream
      WHERE ConferenceDateTime >= (DATEADD(SECOND, - (@interval * 2),SYSUTCDATETIME()))
        AND ConferenceDateTime < (DATEADD(SECOND, -@interval,SYSUTCDATETIME()))

  - query_name: video_streams
    query: |
      Declare @interval int = 60
      SELECT
        Isnull(AVG(VideoPostFECPLR),0) AS VideoPostFECPLR,
        Isnull(AVG(VideoLocalFrameLossPercentageAvg),0) AS VideoLocalFrameLossPercentageAvg,
        Isnull(AVG(RecvFrameRateAverage),0) AS RecvFrameRateAverage,
        Isnull(AVG(VideoPacketLossRate),0) AS VideoPacketLossRate,
        Isnull(AVG(InboundVideoFrameRateAvg),0) AS InboundVideoFrameRateAvg,
        Isnull(AVG(OutboundVideoFrameRateAvg),0) AS OutboundVideoFrameRateAvg,
        ( COUNT(*) / 60 ) AS video_streams_by_second
      FROM [QoEMetrics].[dbo].VideoStream
      WHERE ConferenceDateTime >= (DATEADD(SECOND, - (@interval * 2),SYSUTCDATETIME()))
        AND ConferenceDateTime < (DATEADD(SECOND, -@interval,SYSUTCDATETIME()))

  - query_name: peer2peer_activity
    query: |
      -- Peer2Peer Activity Report
    
      Declare @interval int = 60
      Declare @_StartTime datetime = (DATEADD(SECOND, - (2 *@interval), SYSUTCDATETIME())),
              @_EndTime datetime = (DATEADD(SECOND, -@interval,SYSUTCDATETIME()))
    
      select
              -- T.StartTime as Sample,
              Count(case when s.IsRetried = 1 then null else s.SessionIdTime end) as Sessions,
              -- cast(round( sum(cast(s.SessionSeconds as bigint)) / 60.0, 0) as bigint) as SessionMinutes,
              sum(cast(s.VoipCalls as bigint)) as VoipCalls,
              -- cast(round(sum(cast(s.VoipCallSeconds as bigint)) / 60.0, 0) as bigint) as VoipCallMinutes,
              sum(cast(s.VideoCalls as bigint)) as VideoCalls,
              -- cast(round(sum(cast(s.VideoCallSeconds as bigint)) / 60.0, 0) as bigint) as VideoCallMinutes,
              sum(cast(s.IMSessions as bigint)) as IMSessions,
              sum(cast(s.IMMessages as bigint)) as IMMessages,
              sum(cast(s.FileTransferActs as bigint)) as FileTransferActs,
              sum(cast(s.AppShareActs as bigint)) as AppShareActs
      from (
              select @_StartTime as StartTime, @_EndTime as EndTime
              ) T
      join (
              select s.SessionIdTime,
                              s.User1Id,
                              s.User2Id,
                              isnull(datediff(second, s.ResponseTime, s.SessionEndTime),0) as SessionSeconds,
                              isnull(s.User1MessageCount,0) + isnull(s.User2MessageCount,0) as IMMessages,
                              ( case when (CallFlag & 0x01 = 0) and (s.MediaTypes & 16) <> 0 then 1 else 0 end ) as VoipCalls,
                              ( case when (s.MediaTypes & 16) <> 0
                                              then isnull(datediff(second, s.ResponseTime, s.SessionEndTime), 0)
                                              else 0 end ) as VoipCallSeconds,
                              ( case when (CallFlag & 0x01 = 0) and (s.MediaTypes & 32) <> 0 then 1 else 0 end ) as VideoCalls,
                              ( case when (s.MediaTypes & 32) <> 0
                                              then isnull(datediff(second, s.ResponseTime, s.SessionEndTime), 0)
                                              else 0 end ) as VideoCallSeconds,
                              ( case when (CallFlag & 0x01 = 0) and (s.MediaTypes & 2) <> 0 then 1 else 0 end ) as FileTransferActs,
                              ( case when (CallFlag & 0x01 = 0) and (s.MediaTypes & 8) <> 0 then 1 else 0 end ) as AppShareActs,
                              ( case when (CallFlag & 0x01 = 0) and (s.MediaTypes & 1) <> 0 then 1 else 0 end ) as IMSessions,
                              ( case when (CallFlag & 0x01 = 0) then 0 else 1 end) as IsRetried
              from CDRReportsSessionDetailsBaseView s
              where s.SessionIdTime >= @_StartTime
                              and s.SessionIdTime < @_EndTime
                              and s.MediaTypes <> 0 -- exclude Session if no media is involved
              group by s.SessionIdTime, s.SessionIdSeq, s.ResponseTime, s.SessionEndTime,
                      s.User1Id, s.User2Id, s.User1MessageCount, s.User2MessageCount, s.MediaTypes, s.CallFlag
      ) s
              on  s.SessionIdTime >= T.StartTime
                      and s.SessionIdTime < T.EndTime
      group by T.StartTime


  # - query_name: peer2peer_activity
  #   query: |
  #     -- Peer2Peer Activity Report
    
  #     Declare @interval int = 60
  #     Declare @_StartTime datetime = (DATEADD(SECOND, -@interval, SYSUTCDATETIME())),
  #             @_EndTime datetime = SYSUTCDATETIME()
    
  #     select
  #             -- T.StartTime as Sample,
  #             Count(case when s.IsRetried = 1 then null else s.SessionIdTime end) as [p2p-Sessions],
  #             -- cast(round( sum(cast(s.SessionSeconds as bigint)) / 60.0, 0) as bigint) as SessionMinutes,
  #             sum(cast(s.VoipCalls as bigint)) as [p2p-VoIpCalls],
  #             -- cast(round(sum(cast(s.VoipCallSeconds as bigint)) / 60.0, 0) as bigint) as VoipCallMinutes,
  #             sum(cast(s.VideoCalls as bigint)) as [p2p-VideoCalls],
  #             -- cast(round(sum(cast(s.VideoCallSeconds as bigint)) / 60.0, 0) as bigint) as VideoCallMinutes,
  #             sum(cast(s.IMSessions as bigint)) as [p2p-IMSessions],
  #             sum(cast(s.IMMessages as bigint)) as [p2p-IMMessages],
  #             sum(cast(s.FileTransferActs as bigint)) as [p2p-FileTransfer],
  #             sum(cast(s.AppShareActs as bigint)) as [p2p-AppShare]
  #     from (
  #             select @_StartTime as StartTime, @_EndTime as EndTime
  #             ) T
  #     join (
  #             select s.SessionIdTime,
  #                             s.User1Id,
  #                             s.User2Id,
  #                             isnull(datediff(second, s.ResponseTime, s.SessionEndTime),0) as SessionSeconds,
  #                             isnull(s.User1MessageCount,0) + isnull(s.User2MessageCount,0) as IMMessages,
  #                             ( case when (CallFlag & 0x01 = 0) and (s.MediaTypes & 16) <> 0 then 1 else 0 end ) as VoipCalls,
  #                             ( case when (s.MediaTypes & 16) <> 0
  #                                             then isnull(datediff(second, s.ResponseTime, s.SessionEndTime), 0)
  #                                             else 0 end ) as VoipCallSeconds,
  #                             ( case when (CallFlag & 0x01 = 0) and (s.MediaTypes & 32) <> 0 then 1 else 0 end ) as VideoCalls,
  #                             ( case when (s.MediaTypes & 32) <> 0
  #                                             then isnull(datediff(second, s.ResponseTime, s.SessionEndTime), 0)
  #                                             else 0 end ) as VideoCallSeconds,
  #                             ( case when (CallFlag & 0x01 = 0) and (s.MediaTypes & 2) <> 0 then 1 else 0 end ) as FileTransferActs,
  #                             ( case when (CallFlag & 0x01 = 0) and (s.MediaTypes & 8) <> 0 then 1 else 0 end ) as AppShareActs,
  #                             ( case when (CallFlag & 0x01 = 0) and (s.MediaTypes & 1) <> 0 then 1 else 0 end ) as IMSessions,
  #                             ( case when (CallFlag & 0x01 = 0) then 0 else 1 end) as IsRetried
  #             from CDRReportsSessionDetailsBaseView s
  #             where s.SessionIdTime >= @_StartTime
  #                             and s.SessionIdTime <= @_EndTime
  #                             and s.MediaTypes <> 0 -- exclude Session if no media is involved
  #             group by s.SessionIdTime, s.SessionIdSeq, s.ResponseTime, s.SessionEndTime,
  #                     s.User1Id, s.User2Id, s.User1MessageCount, s.User2MessageCount, s.MediaTypes, s.CallFlag
  #     ) s
  #             on  s.SessionIdTime >= T.StartTime
  #                     and s.SessionIdTime < T.EndTime
  #     group by T.StartTime

  - query_name: conf_activity
    query: |
      -- Conference Activity Report
      Declare @interval int = 60;
      Declare @_StartTime datetime = (DATEADD(SECOND,-(3600 + @interval),SYSUTCDATETIME())),
            @_EndTime datetime = (DATEADD(SECOND, -3600,SYSUTCDATETIME()))

      select
            -- T.StartTime as Sample,
            case ms.McuType
              when 'conf:audio-video' then 'conf-AudioVideo'
              when 'conf:data-conf'   then 'conf-DataConf'
              when 'conf:chat'        then 'conf-Chat'
              when 'conf:phone-conf'  then 'conf-PhoneConf'
              when 'conf:applicationsharing' then 'conf-AppShare'
            end as mcu_type,
            isnull(count(cu.McuType), 0) as  Num,
            isnull(round(sum(Duration),0), 0) as Duration
      from (
            select @_StartTime as StartTime, @_EndTime as EndTime
            ) T
      cross join
      (
            select convert(bit, 0) as IsFromPstn
            union
            select convert(bit, 1) as IsFromPstn
      ) as pt
      cross join
      (
        select 'conf:audio-video' as McuType
        union
        select 'conf:data-conf' as McuType
        union
        select 'conf:chat' as McuType
        union
        select 'conf:phone-conf' as McuType
        union
        select 'conf:applicationsharing' as McuType
      ) as ms
      left join
      (
        select c.SessionIdTime, m.UriType McuType, m.IsFromPstn,
                    sum(cast(datediff(second, m.UserJoinTime, m.UserLeaveTime) as bigint)) as Duration
        from CDRReportsConferencesView c
        inner join CDRReportsMcuJoinsAndLeavesSummaryView m
                on c.SessionIdTime >= @_StartTime
            and c.SessionIdTime <= @_EndTime
            and m.SessionIdTime = c.SessionIdTime
            and m.SessionIdSeq = c.SessionIdSeq
        group by c.SessionIdTime, c.SessionIdSeq, m.McuId, m.UriType, m.UserId, m.IsFromPstn
      ) cu
      on
            pt.IsFromPstn = cu.IsFromPstn
            and ms.McuType = cu.McuType
        and cu.SessionIdTime >= T.StartTime
        and cu.SessionIdTime < T.EndTime
      group by T.StartTime, ms.McuType

